CREATE EXTENSION pg_cheat_funcs;
\pset null '(null)'
SELECT pg_stat_print_memory_context();
 pg_stat_print_memory_context 
------------------------------
 
(1 row)

SELECT pg_signal_process(pg_postmaster_pid(), 'HUP');
 pg_signal_process 
-------------------
 
(1 row)

SET pg_cheat_funcs.scheduling_priority TO 1;
SELECT pg_get_priority(pg_backend_pid());
 pg_get_priority 
-----------------
               1
(1 row)

SELECT pg_set_priority(pg_backend_pid(), 2);
 pg_set_priority 
-----------------
 
(1 row)

SHOW pg_cheat_funcs.scheduling_priority;
 pg_cheat_funcs.scheduling_priority 
------------------------------------
 2
(1 row)

SELECT pg_eucjp('xa4', 'xa2');
ERROR:  database encoding is UTF8
HINT:  pg_eucjp() can be executed only under EUC_JP encoding.
SELECT pg_set_next_xid(next_xid) = next_xid FROM pg_xid_assignment();
 ?column? 
----------
 t
(1 row)

DO $$
DECLARE
  orig_cleanup_age text := current_setting('vacuum_defer_cleanup_age');
BEGIN
  PERFORM pg_advance_vacuum_cleanup_age(99);
  IF current_setting('vacuum_defer_cleanup_age') <> '-99' THEN
    RAISE WARNING 'could not advance vacuum cleanup age properly.';
  END IF;
  PERFORM pg_advance_vacuum_cleanup_age();
  IF current_setting('vacuum_defer_cleanup_age') <> orig_cleanup_age THEN
    RAISE NOTICE 'could not reset vacuum cleanup age properly.';
  END IF;
END;
$$ LANGUAGE plpgsql;
SELECT to_octal(num) FROM generate_series(1, 10) num;
 to_octal 
----------
 1
 2
 3
 4
 5
 6
 7
 10
 11
 12
(10 rows)

SELECT to_octal(2147483647::integer);
  to_octal   
-------------
 17777777777
(1 row)

SELECT to_octal(9223372036854775807::bigint);
       to_octal        
-----------------------
 777777777777777777777
(1 row)

SELECT pg_text_to_hex('PostgreSQL');
    pg_text_to_hex    
----------------------
 506f737467726553514c
(1 row)

SELECT pg_hex_to_text('506f737467726553514c');
 pg_hex_to_text 
----------------
 PostgreSQL
(1 row)

SELECT pg_hex_to_text(upper('506f737467726553514c'));
 pg_hex_to_text 
----------------
 PostgreSQL
(1 row)

SELECT pg_backend_start_time() = backend_start FROM pg_stat_get_activity(pg_backend_pid());
 ?column? 
----------
 t
(1 row)

SELECT pg_file_fsync('global');
 pg_file_fsync 
---------------
 
(1 row)

SELECT pg_file_fsync('global/pg_control');
 pg_file_fsync 
---------------
 
(1 row)

DROP EXTENSION pg_cheat_funcs;
