CREATE EXTENSION pg_cheat_funcs;
\pset null '(null)'
SELECT pg_signal_process(pg_postmaster_pid(), 'HUP');
 pg_signal_process 
-------------------
 
(1 row)

SET pg_cheat_funcs.scheduling_priority TO 1;
SELECT pg_get_priority(pg_backend_pid());
 pg_get_priority 
-----------------
               1
(1 row)

SELECT pg_set_priority(pg_backend_pid(), 2);
 pg_set_priority 
-----------------
 
(1 row)

SHOW pg_cheat_funcs.scheduling_priority;
 pg_cheat_funcs.scheduling_priority 
------------------------------------
 2
(1 row)

SELECT pg_eucjp('xa4', 'xa2');
ERROR:  database encoding is UTF8
HINT:  pg_eucjp() can be executed only under EUC_JP encoding.
SELECT pg_set_next_xid(next_xid) = next_xid FROM pg_xid_assignment();
 ?column? 
----------
 t
(1 row)

BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT pg_refresh_snapshot();
 pg_refresh_snapshot 
---------------------
 
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

SELECT pg_refresh_snapshot();
 pg_refresh_snapshot 
---------------------
 
(1 row)

COMMIT;
DO $$
DECLARE
  orig_cleanup_age text := current_setting('vacuum_defer_cleanup_age');
BEGIN
  PERFORM pg_advance_vacuum_cleanup_age(99);
  IF current_setting('vacuum_defer_cleanup_age') <> '-99' THEN
    RAISE WARNING 'could not advance vacuum cleanup age properly.';
  END IF;
  PERFORM pg_advance_vacuum_cleanup_age();
  IF current_setting('vacuum_defer_cleanup_age') <> orig_cleanup_age THEN
    RAISE NOTICE 'could not reset vacuum cleanup age properly.';
  END IF;
END;
$$ LANGUAGE plpgsql;
SELECT to_octal(num) FROM generate_series(1, 10) num;
 to_octal 
----------
 1
 2
 3
 4
 5
 6
 7
 10
 11
 12
(10 rows)

SELECT to_octal(2147483647::integer);
  to_octal   
-------------
 17777777777
(1 row)

SELECT to_octal(9223372036854775807::bigint);
       to_octal        
-----------------------
 777777777777777777777
(1 row)

SELECT pg_text_to_hex('PostgreSQL');
    pg_text_to_hex    
----------------------
 506f737467726553514c
(1 row)

SELECT pg_hex_to_text('506f737467726553514c');
 pg_hex_to_text 
----------------
 PostgreSQL
(1 row)

SELECT pg_hex_to_text(upper('506f737467726553514c'));
 pg_hex_to_text 
----------------
 PostgreSQL
(1 row)

SELECT pg_backend_start_time() = backend_start FROM pg_stat_get_activity(pg_backend_pid());
 ?column? 
----------
 t
(1 row)

SELECT substring(pg_tablespace_version_directory(), 1, 3);
 substring 
-----------
 PG_
(1 row)

BEGIN;
SELECT pg_advisory_xact_lock(111);
 pg_advisory_xact_lock 
-----------------------
 
(1 row)

SELECT pg_advisory_xact_lock(222);
 pg_advisory_xact_lock 
-----------------------
 
(1 row)

SELECT pg_advisory_xact_lock_shared(333);
 pg_advisory_xact_lock_shared 
------------------------------
 
(1 row)

SELECT pg_advisory_xact_lock(444, 555);
 pg_advisory_xact_lock 
-----------------------
 
(1 row)

SELECT pg_advisory_xact_lock_shared(666, 777);
 pg_advisory_xact_lock_shared 
------------------------------
 
(1 row)

SELECT classid, objid, objsubid, mode FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid, objid, objsubid, mode;
 classid | objid | objsubid |     mode      
---------+-------+----------+---------------
       0 |   111 |        1 | ExclusiveLock
       0 |   222 |        1 | ExclusiveLock
       0 |   333 |        1 | ShareLock
     444 |   555 |        2 | ExclusiveLock
     666 |   777 |        2 | ShareLock
(5 rows)

SELECT pg_advisory_xact_unlock(111);
 pg_advisory_xact_unlock 
-------------------------
 t
(1 row)

SELECT classid, objid, objsubid, mode FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid, objid, objsubid, mode;
 classid | objid | objsubid |     mode      
---------+-------+----------+---------------
       0 |   222 |        1 | ExclusiveLock
       0 |   333 |        1 | ShareLock
     444 |   555 |        2 | ExclusiveLock
     666 |   777 |        2 | ShareLock
(4 rows)

SELECT pg_advisory_xact_unlock_shared(666, 777);
 pg_advisory_xact_unlock_shared 
--------------------------------
 t
(1 row)

SELECT classid, objid, objsubid, mode FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid, objid, objsubid, mode;
 classid | objid | objsubid |     mode      
---------+-------+----------+---------------
       0 |   222 |        1 | ExclusiveLock
       0 |   333 |        1 | ShareLock
     444 |   555 |        2 | ExclusiveLock
(3 rows)

COMMIT;
SELECT classid, objid, objsubid, mode FROM pg_locks WHERE locktype = 'advisory' ORDER BY classid, objid, objsubid, mode;
 classid | objid | objsubid | mode 
---------+-------+----------+------
(0 rows)

SET pg_cheat_funcs.exit_on_segv TO on;
SELECT pg_segmentation_fault(true);
ERROR:  terminating PostgreSQL server process due to segmentation fault
SET pg_cheat_funcs.exit_on_segv TO off;
DROP EXTENSION pg_cheat_funcs;
